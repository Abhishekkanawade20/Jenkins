Project: Create a CI/CD pipeline on jenkins app, push build test and deploy complete project.
-------
============================================================================================================================================================================
step 1: Create one server and install java and jenkins.
-------

sudo apt update
sudo apt install fontconfig openjdk-17-jre
java -version

sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo dnf upgrade
sudo dnf install fontconfig java-17-openjdk
sudo dnf install jenkins
sudo systemctl daemon-reload

============================================================================================================================================================================
step 2: write code in visual code studio and push it on github 
-------

============================================================================================================================================================================

step 3: CI/CD Pull step.
-------
1. add git plugins
2. Create pipepine --> pipeline defination(Pipeline script from SCM) --> Give path of Github URL and file name which is to be build --> It pull repo

* git clone https://github.com/HouariZegai/Calculator.git   ---> we are cloning java app from github

3. install tree package on server to check hiierarechy properly *sudo apt install tree

=============================================================================================================================================================================
************************************************************* About maven command syntax *************************************************************************************
maven: - Maven is a build tool which is used to build artifact.
       - Maven is a ope-source tool which is used to build application.

maven lifecycle: 
---------------
Basically it is a process collection maven lifecycle.

maven lifcycle types:
1. Default - By default behaviour of lifecycle.
2. clean - It discard old build.
3. site - It help of documentation.

Maven phases:
--------------
1. default phases

1. validate - validate the project is correct and all necessary information is available
2. compile - compile the source code of the project
3. test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
4. package - take the compiled code and package it in its distributable format, such as a JAR.
5. verify - run any checks on results of integration tests to ensure quality criteria are met
6. install - install the package into the local repository, for use as a dependency in other projects locally
7. deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.

2. Clean phase:
Cleaun up artifacts created by prior builds.

3. site phase:
It generates documentation for this project.

pom.xml
-----------------
1. while building the code, if we required any dependency it will collect it from the pom.xml file
2. pom.xml file contains the all required information, library, plugging, dependancy,
3. Developer wrote pom.xml.
4. we can also add maven dependecy here as per requirement from maven repo.

===========================================================================================================================================================================
======================================================================= Command structure =================================================================================
mvn      goal         argument 
    <sub-command>   <extra parameter>

Github token: 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


**************************************************************** Build configuration *********************************************************************************

=======================================================================================================================================================================
******************************************** Maven Installation *************************************************************************************
 Go to official website of apache.

# wget <maven_url>                  ----> 
# tar -xvzf apche-maven             ----> extract package
# mv apache-maven /opt              ----> mv to opt dir

=========================================================================================================================================================================
Need to generate archetype:
---------------------------
mvn archetype:generate -DgroupId=com.<app_name> -DartifactId=<app_name> -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false

=========================================================================================================================================================================
******************************************** set environment variables for maven *************************************************************************************
Now add the mvn command in environment

# sudo vim /etc/profile and add below in file

export PATH=$PATH:' /opt/apache-maven-3.9.6/bin'

# source /etc/profile
# bash

=======================================================================================================================================================================
we already cloned java application, go into that application dir.
git clone <java_app_public_repo_url>

# cd Calculator
# mvn package              ----> To build the package.
# tree                     ---> You will get a hierechy

also pom.xml file is generated. # cd calculator

Check target file is generated after running build package command.

=====================================================================================================================================================================
Now go to jenkin app :
---------------------
Here, we are adding the maven execuatble command path to prvide the maven environment in pipeline.

jenkins --> manage jenkins --> tools --> maven configuration --> scroll down and select maven installation

* Add maven installation:
       Name = mvn
       Home_Directory = /opt/apache-maven-3.9.6

--------------------------------------------------------------------------------------------------------------------
come back to our jenkins server:

# cd /Calculatior             ---> Go to application dir
# mvn clean package           --->  Maven command used to clean the project and then package it into an artifact (e.g., JAR, WAR, etc.). So basically it genrates the artifact
                                    It generates the artiact in   " /var/lib/jenkins/workspace/pipeline/target " location .

==> Now add the build stage in our pipeline

pipeline syntax generator:
------------------------------
Jenkins --> pipeline --> snipper generator --> sample step (sh:shell script) --> shell script(mvn package build) --> You'll get op : sh 'mvn clean package' 

[o/p] --> add it in build script

=====================================================================================================================================================================

Now add this in build stage in visual code
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
stage('build') {
            steps {
                sh '/opt/apache-maven-3.9.6/mvn clean package'
                echo 'build stage'
            }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Now push this code and run pipeline. And you will get below error.

Error 1:
-------
Your pom.xml file is not located at /var/lib/jenkins/workspace/pipeline.

solution 1: copy pom.xml file from application dir and paste it at workspace path.
          # cp /Calculator/pom.xml /var/lib/jenkins/workspace/pipeline

solution 2: # mvn -f path/to/pom.xml compile  (explore more).

Error 2: it is supporting java11 version only not java 17
--------
FAiled to execute goal porg.apache 

==> .mojo is not supported by java-17, so we need to install java-11 or below version.
   # sudo update-alternatives --config java
   # Now select the java-11 version and enter
   # java --version  and it should be java 11 running.

And code is build successfully. 
=================================================================================================================================================================================
so maven generated the artifact in target directory.

/var/lib/jenkins/workspace/pipeline/target/Calculator-1.0-SNAPSHOT.jar

It generates the .jar or .war extetension.

************************************************* Build finish *******************************************************************************************************************

Stage 3: Testing of Java application using Sonarqube.

1. Create one separate instance for sonarqube also we are going to install database on same server.
   create t2.xlrge instance because we have required more ram and more storage.

2. SonarQube Installation on server.

## Prerequisites
- SonarQube server will require 3GB+ RAM to work effeciently

### Install Database
```shell
rpm -ivh http://repo.mysql.com/mysql57-community-release-el7.rpm
ls /etc/yum.repos.d/
rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
yum install mysql-server -y
systemctl start mysqld
systemctl enable mysqld
grep 'temporary password' /var/log/mysqld.log
mysql_secure_installation -p <password>
mysql_secure_installation -p <password> -------------------------------> Temperory password  (Admin@123)
mysql_secure_installation                -------------------------------> Set New Password
```
# Now, our Database server is ready #

### Install Java
```shell
yum install wget epel-release -y
yum install java -y
wget https://download.bell-sw.com/java/11.0.4/bellsoft-jdk11.0.4-linux-amd64.rpm    ----> We required bellsoft's java for sonaqube.
rpm -ivh bellsoft-jdk11.0.4-linux-amd64.rpm
#alternatives --config java
```

### Configure Linux System for Sonarqube
```shell
echo 'vm.max_map_count=262144' >/etc/sysctl.conf
sysctl -p
echo '* - nofile 80000' >>/etc/security/limits.conf
sed -i -e '/query_cache_size/ d' -e '$ a query_cache_size = 15M' /etc/my.cnf
systemctl restart mysqld
```
### Configure Database for Sonarqube
```shell
mysql -u root -p
mysql>
    create database sonarqube;
    show databases;
    create user 'sonarqube'@'localhost' identified by 'Redhat@123';
    grant all privileges on sonarqube.* to 'sonarqube'@'localhost';
    flush privileges;
```
### Install Sonarqube
```shell
yum install unzip -y
wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.9.1.zip
cd /opt
unzip ~/sonarqube-7.9.1.zip
mv sonarqube-7.9.1 sonar
```
### Configure Sonarqube
```shell
sed -i -e '/^sonar.jdbc.username/ d' -e '/^sonar.jdbc.password/ d' -e '/^sonar.jdbc.url/ d' -e '/^sonar.web.host/ d' -e '/^sonar.web.port/ d' /opt/sonar/conf/sonar.properties
sed -i -e '/#sonar.jdbc.username/ a sonar.jdbc.username=sonarqube' -e '/#sonar.jdbc.password/ a sonar.jdbc.password=Redhat@123' -e '/InnoDB/ a sonar.jdbc.url=jdbc.mysql://localhost:3306/sonarqube?useUnicode=true&characterEncoding=utf&rewriteBatchedStatements=true&useConfigs=maxPerformance' -e '/#sonar.web.host/ a sonar.web.host=0.0.0.0' /opt/sonar/conf/sonar.properties
useradd sonar
chown sonar:sonar /opt/sonar/ -R
sed -i -e '/^#RUN_AS_USER/ c RUN_AS_USER=sonar' /opt/sonar/bin/linux-x86-64/sonar.sh
```
### Start Sonarqube
```shell
/opt/sonar/bin/linux*/sonar.sh start
/opt/sonar/bin/linux*/sonar.sh status
/opt/sonar/logs
```

## Whitelist the ports
```shell
    - Sonarqube = 9000
```

## Try to access the Sonarqube application
```shell
Public IP:9000
```

## Default ID and Password
```shell
username = admin           ----> always default and id and password for sonarqube is admin 
password = admin
```
## Understand the Sonarqube console

## Setup the project in sonarqube
1. Project Name: studentapp-ui
2. Genrate the token: save to token, it's only one time visible.
3. After generating token in sonarqube you will get a some script copy that and paste in vs code's script for test.
3. Set-up the required java enviorment
4. Setup the build tool (maven)
    then we got the scanner maven commands, to run on jenkins server.
```shell
    mvn sonar:sonar \
  -Dsonar.projectKey=studentapp-ui \
  -Dsonar.host.url=http://54.221.44.130:9000 \
  -Dsonar.login=f316d47655ec5d539cb484f38aa1f1666c491815
```
5. First of all clone the studentapp-ui repository in jenkins server
6. Run te 4th no's all maven commands in maven project's home directory, where pom.xml file is present.
```shell
git clone https://github.com/chetansomkuwar254/studentapp.ui.git
cd /studentapp.ui
mvn clean package
# run mvn sonar:sonar <commands>
```
7. Now this project made in sonarqube applicaiton, and it passed from quality-gate criteria.
8. Tester and developer will create and manage quality gate.

## Add the maven scanner commands in pipeline
```shell
run mvn sonar:sonar <commands>
```

Add below in script:

 stage('test') {
            steps {
                sh '/opt/apache-maven-3.9.6/bin/mvn sonar:sonar -Dsonar.projectKey=Calculator -Dsonar.host.url=http://3.108.196.130:9000 -Dsonar.login=62dabd732b94780b83e77bce03afa0e9ab5805b9'
                echo 'test stage'
            }
======================================================= Test Finish ============================================================================
==========================================================================================================================================
## Another way to integrate sonarqube with jenkins
Plugins:
1. Sonarqube scanner
2. Sonarqube qulatity gate

# Pass the credentials in Jenkins
Dashboard > Manage Jenkins > Credentials > System > Global Credentials
    - Secret: <token>
    - ID: sonar-token
Meanwhile add Enviormental variable of sonarqube in Jenkins.
    Name: Sonar-server
    Secret: <token>

# Create Pipeline script for sonarqube
    - Pipeline syntax
    - Sample step: withSonarQubeEnv: Prepare sonarqube Enviorment
    - Add token
    - Generate the pipeline script
----------------------------------------------------------------------------------------------------
# If we want to get condition for quality-gate for our application code. For that we need to create a Quality-gate rule in sonarqube-server application.
Note: If our application code has gate failed then, our application is not able to deploy for that we set quality gate.
    # waitforquality gate

# Wait for quality gate syntax (timeout-time)
# Scenarion: If my quality-gate has not passed then my pipeline is in paused condition, at that time my quality-gate server is down for 2 days, till my pipeline has stucked for 2 days fro all remaining stages for that we add the timeout sesion in quality-gate


# we create script through pipeline syntax generator
    - Pipeline syntax
    - Sample step: waitForQualityGate wait for sonarqube analysis to be completed and return quality gate status
    - ServerAuthentication toke: sonar-token
    - Generate the pipeline sccript: <script> 
```shell
# If my quality gate is failed so,
waitForQualityGate abortPipeline: true;
```
----------------------------------------------------------------------------------------------------

# changed the quality-gate type in sonarqube applicaiton
    - Daufalut
    - Customized one

----------------------------------------------------------------------------------------------------









